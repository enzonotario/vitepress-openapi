{
  "openapi": "3.0.0",
  "info": {
    "title": "Example of an OpenAPI document different schemas",
    "version": "1.0.0"
  },
  "paths": {
    "/tags-array": {
      "get": {
        "summary": "Get a tags array",
        "operationId": "getTagsArray",
        "description": "Example of a JSON object with an array of tags using items schema.",
        "responses": {
          "200": {
            "description": "An object containing an array of tags",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagsObject"
                }
              }
            }
          }
        }
      }
    },
    "/circular-reference": {
      "get": {
        "summary": "Get a parent",
        "operationId": "getCircularReference",
        "description": "Example of a JSON object with a circular reference.",
        "responses": {
          "200": {
            "description": "A parent with a child",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Parent"
                }
              }
            }
          }
        }
      }
    },
    "/multiple-levels": {
      "get": {
        "summary": "Get the root object",
        "operationId": "getMultipleLevels",
        "description": "Example of a JSON object with multiple levels.",
        "responses": {
          "200": {
            "description": "Example of a deeply nested structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Level1"
                }
              }
            }
          }
        }
      }
    },
    "/primitive-string": {
      "get": {
        "summary": "Get a string",
        "operationId": "getPrimitiveString",
        "description": "Example of a JSON object with a string.",
        "responses": {
          "200": {
            "description": "A string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Hello, World!"
                }
              }
            }
          }
        }
      }
    },
    "/primitive-number": {
      "get": {
        "summary": "Get a number",
        "operationId": "getPrimitiveNumber",
        "description": "Example of a JSON object with a number.",
        "responses": {
          "200": {
            "description": "A number",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "example": 42
                }
              }
            }
          }
        }
      }
    },
    "/primitive-boolean": {
      "get": {
        "summary": "Get a boolean",
        "operationId": "getPrimitiveBoolean",
        "description": "Example of a JSON object with a boolean.",
        "responses": {
          "200": {
            "description": "A boolean",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        }
      }
    },
    "/nullable-object": {
      "get": {
        "summary": "Get a nullable object",
        "operationId": "getNullableObject",
        "description": "Example of a JSON object that can be null.",
        "responses": {
          "200": {
            "description": "A nullable object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NullableObject"
                }
              }
            }
          }
        }
      }
    },
    "/tuple-array": {
      "get": {
        "summary": "Get a tuple array with prefixItems",
        "operationId": "getTupleArray",
        "description": "Example of a JSON array with prefixItems defining a tuple structure.",
        "responses": {
          "200": {
            "description": "A tuple array with fixed positions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TupleArray"
                }
              }
            }
          }
        }
      }
    },
    "/mixed-array": {
      "get": {
        "summary": "Get a mixed array with prefixItems and items",
        "operationId": "getMixedArray",
        "description": "Example of a JSON array with both prefixItems and items schemas.",
        "responses": {
          "200": {
            "description": "An array with fixed positions followed by additional items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MixedArray"
                }
              }
            }
          }
        }
      }
    },
    "/complex-schema": {
      "post": {
        "summary": "Test complex schema with oneOf and anyOf",
        "operationId": "testComplexSchema",
        "description": "Example of a complex request and response schema using oneOf and anyOf.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComplexRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Complex response with oneOf and anyOf schemas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplexResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request with validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TagsObject": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "tag name",
              "maxLength": 30
            }
          },
          "metadata": {
            "type": "object",
            "properties": {
              "numbers": {
                "type": "array",
                "items": {
                  "type": "number",
                  "description": "A number associated with the tag"
                }
              }
            }
          }
        },
        "example": {
          "tags": [
            "important",
            "featured",
            "new",
            "sale"
          ],
          "metadata": {
            "extraTags": [
              "limited",
              "exclusive"
            ]
          }
        }
      },
      "Parent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "child": {
            "$ref": "#/components/schemas/Child"
          }
        }
      },
      "Child": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "Level1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level2": {
            "$ref": "#/components/schemas/Level2"
          }
        }
      },
      "Level2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level3": {
            "$ref": "#/components/schemas/Level3"
          }
        }
      },
      "Level3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level4": {
            "$ref": "#/components/schemas/Level4"
          }
        }
      },
      "Level4": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level5": {
            "$ref": "#/components/schemas/Level5"
          }
        }
      },
      "Level5": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level6": {
            "$ref": "#/components/schemas/Level6"
          }
        }
      },
      "Level6": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level7": {
            "$ref": "#/components/schemas/Level7"
          }
        }
      },
      "Level7": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level8": {
            "$ref": "#/components/schemas/Level8"
          }
        }
      },
      "Level8": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level9": {
            "$ref": "#/components/schemas/Level9"
          }
        }
      },
      "Level9": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level10": {
            "$ref": "#/components/schemas/Level10"
          }
        }
      },
      "Level10": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level11": {
            "$ref": "#/components/schemas/Level11"
          }
        }
      },
      "Level11": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level12": {
            "$ref": "#/components/schemas/Level12"
          }
        }
      },
      "Level12": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level13": {
            "$ref": "#/components/schemas/Level13"
          }
        }
      },
      "Level13": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level14": {
            "$ref": "#/components/schemas/Level14"
          }
        }
      },
      "Level14": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level15": {
            "$ref": "#/components/schemas/Level15"
          }
        }
      },
      "Level15": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level16": {
            "$ref": "#/components/schemas/Level16"
          }
        }
      },
      "Level16": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level17": {
            "$ref": "#/components/schemas/Level17"
          }
        }
      },
      "Level17": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level18": {
            "$ref": "#/components/schemas/Level18"
          }
        }
      },
      "Level18": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level19": {
            "$ref": "#/components/schemas/Level19"
          }
        }
      },
      "Level19": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "level20": {
            "$ref": "#/components/schemas/Level20"
          }
        }
      },
      "Level20": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "finalValue": {
            "type": "string"
          }
        }
      },
      "NullableObject": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "TupleArray": {
        "type": "array",
        "description": "A tuple array with fixed position types using prefixItems",
        "prefixItems": [
          {
            "type": "string",
            "description": "First element - always a string",
            "example": "username"
          },
          {
            "type": "number",
            "description": "Second element - always a number",
            "example": 42
          },
          {
            "type": "boolean",
            "description": "Third element - always a boolean",
            "example": true
          },
          {
            "type": "object",
            "description": "Fourth element - a complex object",
            "properties": {
              "id": {
                "type": "string",
                "example": "abc123"
              },
              "value": {
                "type": "number",
                "example": 99.5
              }
            }
          },
          {
            "type": "array",
            "description": "Fifth element - an array of strings",
            "items": {
              "type": "string"
            },
            "example": [
              "tag1",
              "tag2",
              "tag3"
            ]
          }
        ],
        "minItems": 5,
        "maxItems": 5
      },
      "MixedArray": {
        "type": "array",
        "description": "An array with both prefixItems and items schemas",
        "prefixItems": [
          {
            "type": "string",
            "description": "First element - always a string identifier",
            "example": "user-id-123"
          },
          {
            "type": "object",
            "description": "Second element - user metadata",
            "properties": {
              "name": {
                "type": "string",
                "example": "John Doe"
              },
              "role": {
                "type": "string",
                "enum": [
                  "admin",
                  "user",
                  "guest"
                ],
                "example": "admin"
              }
            }
          }
        ],
        "items": {
          "type": "object",
          "description": "Additional elements - data entries",
          "properties": {
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "example": "2023-01-15T14:30:00Z"
            },
            "value": {
              "type": "number",
              "example": 42.5
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "important",
                "reviewed"
              ]
            }
          }
        },
        "minItems": 2,
        "example": [
          "user-id-123",
          {
            "name": "John Doe",
            "role": "admin"
          },
          {
            "timestamp": "2023-01-15T14:30:00Z",
            "value": 42.5,
            "tags": [
              "important",
              "reviewed"
            ]
          },
          {
            "timestamp": "2023-01-16T09:15:00Z",
            "value": 17.8,
            "tags": [
              "pending"
            ]
          }
        ]
      },
      "ComplexRequest": {
        "type": "object",
        "required": [
          "id",
          "data"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the request",
            "example": "req-12345"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "When the request was created",
            "example": "2023-05-20T15:30:45Z"
          },
          "data": {
            "description": "The main data payload that can be one of several types",
            "oneOf": [
              {
                "type": "object",
                "description": "User data",
                "required": [
                  "type",
                  "user"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "user"
                    ],
                    "example": "user"
                  },
                  "user": {
                    "type": "object",
                    "required": [
                      "id",
                      "name"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "user-789"
                      },
                      "name": {
                        "type": "string",
                        "example": "Jane Smith"
                      },
                      "email": {
                        "type": "string",
                        "format": "email",
                        "example": "jane@example.com"
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "Product data",
                "required": [
                  "type",
                  "product"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "product"
                    ],
                    "example": "product"
                  },
                  "product": {
                    "type": "object",
                    "required": [
                      "id",
                      "name",
                      "price"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "prod-456"
                      },
                      "name": {
                        "type": "string",
                        "example": "Smartphone X"
                      },
                      "price": {
                        "type": "number",
                        "format": "float",
                        "example": 599.99
                      },
                      "inStock": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "Order data",
                "required": [
                  "type",
                  "order"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "order"
                    ],
                    "example": "order"
                  },
                  "order": {
                    "type": "object",
                    "required": [
                      "id",
                      "items"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "order-123"
                      },
                      "customer": {
                        "$ref": "#/components/schemas/NullableObject"
                      },
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "productId",
                            "quantity"
                          ],
                          "properties": {
                            "productId": {
                              "type": "string",
                              "example": "prod-456"
                            },
                            "quantity": {
                              "type": "integer",
                              "minimum": 1,
                              "example": 2
                            },
                            "unitPrice": {
                              "type": "number",
                              "example": 599.99
                            }
                          }
                        }
                      },
                      "totalAmount": {
                        "type": "number",
                        "example": 1199.98
                      }
                    }
                  }
                }
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata that can include any combination of these fields",
            "anyOf": [
              {
                "type": "object",
                "required": [
                  "source"
                ],
                "properties": {
                  "source": {
                    "type": "string",
                    "description": "Source of the request",
                    "example": "web"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "priority"
                ],
                "properties": {
                  "priority": {
                    "type": "string",
                    "enum": [
                      "low",
                      "medium",
                      "high"
                    ],
                    "description": "Priority level",
                    "example": "high"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "tags"
                ],
                "properties": {
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags for categorization",
                    "example": [
                      "important",
                      "sales",
                      "follow-up"
                    ]
                  }
                }
              }
            ]
          }
        },
        "example": {
          "id": "req-12345",
          "timestamp": "2023-05-20T15:30:45Z",
          "data": {
            "type": "order",
            "order": {
              "id": "order-123",
              "customer": {
                "id": "cust-456",
                "name": "John Doe",
                "description": "Loyal customer"
              },
              "items": [
                {
                  "productId": "prod-456",
                  "quantity": 2,
                  "unitPrice": 599.99
                }
              ],
              "totalAmount": 1199.98
            }
          },
          "metadata": {
            "source": "web",
            "priority": "high",
            "tags": [
              "important",
              "sales"
            ]
          }
        }
      },
      "ComplexResponse": {
        "type": "object",
        "required": [
          "id",
          "status",
          "result"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the response",
            "example": "resp-67890"
          },
          "status": {
            "type": "string",
            "enum": [
              "success",
              "partial",
              "error"
            ],
            "description": "Status of the response",
            "example": "success"
          },
          "result": {
            "description": "The result data with nested oneOf and anyOf",
            "oneOf": [
              {
                "type": "object",
                "description": "Success result",
                "required": [
                  "type",
                  "data"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "success"
                    ],
                    "example": "success"
                  },
                  "data": {
                    "anyOf": [
                      {
                        "type": "object",
                        "required": [
                          "user"
                        ],
                        "properties": {
                          "user": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "user-789"
                              },
                              "profile": {
                                "oneOf": [
                                  {
                                    "type": "object",
                                    "required": [
                                      "type",
                                      "personal"
                                    ],
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "personal"
                                        ],
                                        "example": "personal"
                                      },
                                      "personal": {
                                        "type": "object",
                                        "properties": {
                                          "firstName": {
                                            "type": "string",
                                            "example": "Jane"
                                          },
                                          "lastName": {
                                            "type": "string",
                                            "example": "Smith"
                                          },
                                          "age": {
                                            "type": "integer",
                                            "example": 28
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "type",
                                      "business"
                                    ],
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "business"
                                        ],
                                        "example": "business"
                                      },
                                      "business": {
                                        "type": "object",
                                        "properties": {
                                          "companyName": {
                                            "type": "string",
                                            "example": "Acme Inc."
                                          },
                                          "position": {
                                            "type": "string",
                                            "example": "CEO"
                                          },
                                          "employeeCount": {
                                            "type": "integer",
                                            "example": 250
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "transaction"
                        ],
                        "properties": {
                          "transaction": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "txn-123456"
                              },
                              "amount": {
                                "type": "number",
                                "example": 1299.99
                              },
                              "currency": {
                                "type": "string",
                                "example": "USD"
                              },
                              "paymentMethod": {
                                "oneOf": [
                                  {
                                    "type": "object",
                                    "required": [
                                      "type",
                                      "card"
                                    ],
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "card"
                                        ],
                                        "example": "card"
                                      },
                                      "card": {
                                        "type": "object",
                                        "properties": {
                                          "last4": {
                                            "type": "string",
                                            "example": "4242"
                                          },
                                          "brand": {
                                            "type": "string",
                                            "example": "visa"
                                          },
                                          "expiryMonth": {
                                            "type": "integer",
                                            "example": 12
                                          },
                                          "expiryYear": {
                                            "type": "integer",
                                            "example": 2025
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "type",
                                      "bankTransfer"
                                    ],
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "bankTransfer"
                                        ],
                                        "example": "bankTransfer"
                                      },
                                      "bankTransfer": {
                                        "type": "object",
                                        "properties": {
                                          "accountLast4": {
                                            "type": "string",
                                            "example": "6789"
                                          },
                                          "bankName": {
                                            "type": "string",
                                            "example": "National Bank"
                                          },
                                          "transferDate": {
                                            "type": "string",
                                            "format": "date",
                                            "example": "2023-05-21"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "type",
                                      "digitalWallet"
                                    ],
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "digitalWallet"
                                        ],
                                        "example": "digitalWallet"
                                      },
                                      "digitalWallet": {
                                        "type": "object",
                                        "properties": {
                                          "provider": {
                                            "type": "string",
                                            "example": "PayPal"
                                          },
                                          "email": {
                                            "type": "string",
                                            "format": "email",
                                            "example": "user@example.com"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              },
              {
                "type": "object",
                "description": "Error result",
                "required": [
                  "type",
                  "error"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "error"
                    ],
                    "example": "error"
                  },
                  "error": {
                    "type": "object",
                    "required": [
                      "code",
                      "message"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "example": "INVALID_REQUEST"
                      },
                      "message": {
                        "type": "string",
                        "example": "The request contains invalid data"
                      },
                      "details": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "field": {
                              "type": "string",
                              "example": "data.user.email"
                            },
                            "issue": {
                              "type": "string",
                              "example": "Invalid email format"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata with anyOf",
            "anyOf": [
              {
                "type": "object",
                "required": [
                  "processingTime"
                ],
                "properties": {
                  "processingTime": {
                    "type": "number",
                    "description": "Time taken to process the request in ms",
                    "example": 235.45
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "region"
                ],
                "properties": {
                  "region": {
                    "type": "string",
                    "description": "Server region that processed the request",
                    "example": "us-west-1"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "version"
                ],
                "properties": {
                  "version": {
                    "type": "string",
                    "description": "API version",
                    "example": "v2.3.1"
                  }
                }
              }
            ]
          }
        },
        "example": {
          "id": "resp-67890",
          "status": "success",
          "result": {
            "type": "success",
            "data": {
              "transaction": {
                "id": "txn-123456",
                "amount": 1299.99,
                "currency": "USD",
                "paymentMethod": {
                  "type": "card",
                  "card": {
                    "last4": "4242",
                    "brand": "visa",
                    "expiryMonth": 12,
                    "expiryYear": 2025
                  }
                }
              }
            }
          },
          "metadata": {
            "processingTime": 235.45,
            "region": "us-west-1",
            "version": "v2.3.1"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "object",
            "required": [
              "code",
              "message"
            ],
            "properties": {
              "code": {
                "type": "string",
                "description": "Error code",
                "example": "VALIDATION_ERROR"
              },
              "message": {
                "type": "string",
                "description": "Human-readable error message",
                "example": "The request contains validation errors"
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "field",
                    "message"
                  ],
                  "properties": {
                    "field": {
                      "type": "string",
                      "description": "Field with the error",
                      "example": "data.user.email"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message for this field",
                      "example": "Must be a valid email address"
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "error": {
            "code": "VALIDATION_ERROR",
            "message": "The request contains validation errors",
            "details": [
              {
                "field": "data.user.email",
                "message": "Must be a valid email address"
              },
              {
                "field": "metadata.priority",
                "message": "Must be one of: low, medium, high"
              }
            ]
          }
        }
      }
    }
  }
}
