import type { OAExampleObject } from '../../types'
import type { OAProperty } from '../parser/getSchemaUi'
import { getSchemaUiFormUrlEncoded } from './getSchemaUiFormUrlEncoded'
import { getSchemaUiJson } from './getSchemaUiJson'
import { getSchemaUiXml } from './getSchemaUiXml'

interface ContentTypeSchemaExample {
  key: string
  summary: string
  valueGenerator: (uiProperties: OAProperty[] | OAProperty, useExample: boolean) => any
}

function getContentTypeSchemaExample(contentType: string): ContentTypeSchemaExample {
  if (isXml(contentType)) {
    return {
      key: 'XML',
      summary: 'XML',
      valueGenerator: getSchemaUiXml,
    }
  }

  if (isFormUrlEncoded(contentType)) {
    return {
      key: 'Form Data',
      summary: 'Form Data',
      valueGenerator: getSchemaUiFormUrlEncoded,
    }
  }

  return {
    key: 'JSON',
    summary: 'JSON',
    valueGenerator: getSchemaUiJson,
  }
}

export function getSchemaExample(contentType: string, uiProperties: OAProperty[] | OAProperty, useExample = false): Record<string, OAExampleObject> {
  const contentTypeSchemaExample = getContentTypeSchemaExample(contentType)
  return {
    [contentTypeSchemaExample.key]: getSchemaExampleValue(contentTypeSchemaExample, uiProperties, useExample),
  }
}

function getSchemaExampleValue(contentTypeSchema: ContentTypeSchemaExample, uiProperties: OAProperty[] | OAProperty, useExample = false): OAExampleObject {
  return {
    summary: contentTypeSchema.summary,
    description: '',
    value: contentTypeSchema.valueGenerator(uiProperties, useExample),
    isAutogenerated: true,
  } as OAExampleObject
}

function isXml(contentType: string): boolean {
  return contentType.toLowerCase().match(/^(text|application)\/.*xml($|;|\\+)/) !== null
}

function isFormUrlEncoded(contentType: string): boolean {
  return contentType.toLowerCase() === 'application/x-www-form-urlencoded'
}
